:- module(profit,[profit/2, revenue/2, expenses/2]).

:- use_module(auxiliary, [is_location/2,earning/3,distance/3]).
:- use_module(utility,[last_pos_id/2,previous_day/2,is_day_vehicle_schedule/4,order_list_route_once/2]).

%%%%%%%%%%%%%%%%%%%%%%%%%
%         PROFIT        %
%%%%%%%%%%%%%%%%%%%%%%%%%

% profit(+P, -Profit) - Profit is the profit of plan P.
profit(P, Profit) :-
			revenue(P,Revenue),
			expenses(P,Expenses),
			Profit is Revenue - Expenses.

% Revenue

% revenue(+P, -Revenue) - Revenue is the revenue generated by plan P.
revenue(plan(Schedules), Revenue) :- revenue(Schedules,Revenue).

% revenue(+Schedules, -Revenue) - Revenue is the revenue generated by Schedules.
revenue([],0.0).
revenue([H|T],Revenue) :-
			schedule_revenue(H,R1),
			revenue(T,R2),
			Revenue is R1+R2.
% schedule(+Schedule, -Revenue) - Revenue is the revenue generated by the Schedule
schedule_revenue(schedule(_,Day,R),Revenue) :-
			order_list_route_once(R,Os),
			order_list_revenue(Os,Day,Revenue).

% order_list_revenue(+Orders, +Day, -Revenue) - Revenue is the revenue generated by shipping all Orders at working day Day.
order_list_revenue([],_,0.0).
order_list_revenue([H|T],Day, Revenue) :-
			earning(H,Day,Val),
			order_list_revenue(T,Day,NewRevenue),
			Revenue is NewRevenue + Val.


%Expenses

% expenses(+P, -Expenses) - Expenses are the expenses induced by plan P.
expenses(plan(Schedules),Expenses) :- expenses(Schedules,Schedules,Expenses).

% expenses(+Schedules, -Expenses) - Expenses are the expenses induced by Schedules.
expenses([],_,0.0).
expenses([H|T], Schedules,Expenses) :-
			schedule_expenses(H,Schedules,Exp1),
			expenses(T,Schedules,Exp2),
			Expenses is Exp1+Exp2.

% schedule_expenses(+Schedule, -Expenses) - Expenses are the expenses induced by Schedule.
schedule_expenses(schedule(_,_,[]),_,0.0):-!.
schedule_expenses(schedule(Vid,Day,R),_,Expenses) :-
			R \= [],
			not(previous_day(Day,_)),
			!,
			vehicle(Vid,StartId,_,_,UsageCost,_),
			route_expenses(R,Vid,StartId,RouteExp),
			Expenses is RouteExp + UsageCost.
schedule_expenses(schedule(Vid,Day,R),Schedules,Expenses) :-
			R \= [],
			previous_day(Day,PrevDay),
			!,
			is_day_vehicle_schedule(PrevDay,Vid,Schedules,S),
			vehicle(Vid,_,_,_,UsageCost,_),
			last_pos_id(S,StartId),
			route_expenses(R,Vid,StartId,RouteExp),
			Expenses is RouteExp + UsageCost.

% route_expenses(+R,+Vid, -Expenses) - Expenses are the expenses induced by the vehicule Vid driving route R (Ignoring UsageCost).
route_expenses([],_,_,0.0).
route_expenses([H|T],Vid,LastId,Expenses) :-
			is_location(H,ToLoc),
			is_location(LastId,FromLoc),
			distance(ToLoc,FromLoc,Dist),
			vehicle(Vid,_,_,_,_,KmCost),
			Exp1 is KmCost * Dist,
			route_expenses(T,Vid,H,Exp2),
			Expenses is Exp1 + Exp2.